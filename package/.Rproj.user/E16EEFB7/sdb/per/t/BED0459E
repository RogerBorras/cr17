{
    "collab_server" : "",
    "contents" : "\n#' @title Number of events tables.\n#' @name eventsTab\n#' @description The function creates tables for each risk with number of events up to given time in groups.\n#' @param fit a result of fitSurvival function.\n#' @param ci a result of fitCuminc function.\n#' @param risk name of a column indicating type of event, can be numeric or factor/character.\n#' @param group name of a column indicating group variable, can be numeric or factor/character.\n#' @return A grob with n tables, where n is number of risks. Each table contains number of events that have happened in each group up to given time point (the time points correspond to breaks at x-axis of plots with cumulative incidence curves).\n#' @export\n#' @examples fitS <- fitSurvival(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\", type = \"kaplan-meier\", conf.int = 0.95, conf.type = \"log\")\n#' fitC <- fitCuminc(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\")\n#' eventTab(fit = fitS, ci = fitC, risk = \"event\", group = \"gender\")\n#' @importFrom dplyr filter\n#' @importFrom scales extended_breaks\n#' @importFrom grid textGrob\n\n\neventTab <- function(fit,\n                     ci,\n                     risk,\n                     group){\n\n\n    #make long format\n    ci <- ci[-length(ci)]\n    aggNames <- names(ci)\n\n    toPlot <- data.frame()\n\n    for(i in aggNames){\n        tmp <- as.data.frame(ci[[i]])\n        tmp$name <- i\n        toPlot <- as.data.frame(rbind(toPlot, tmp))\n    }\n\n    riskGroup <- sapply(toPlot$name, function(x){\n        unlist(strsplit(x, split = \" \"))\n    })\n\n    riskGroup <- as.data.frame(riskGroup)\n    riskGroup <- t(riskGroup)\n    colnames(riskGroup) <- c(risk, group)\n    rownames(riskGroup) <- NULL\n\n    toPlot <- cbind(toPlot, riskGroup)\n    toPlot <- toPlot[, !names(toPlot) %in% \"name\"]\n\n\n    risks <- as.data.frame(unique(toPlot[,risk]))\n    risks <- levels(factor(risks[,1]))\n\n    groups <- as.data.frame(unique(toPlot[,group]))\n    groups <- levels(factor(groups[,1]))\n\n\n    colnames(toPlot)[which(colnames(toPlot) == risk)] <- \"fac\"\n    colnames(toPlot)[which(colnames(toPlot) == group)] <- \"col\"\n\n    #dealing with factor names of strata\n    badGroupNames <- levels(fit[[1]]$strata)\n    strataMapping <- 1:length(badGroupNames)\n    strataMapping <- cbind(strataMapping, groups)\n    colnames(strataMapping) <- c(\"strata\", \"group\")\n\n    timePoints <- extended_breaks()(toPlot$time)\n\n    names(timePoints) <- risks\n\n    forTables <- data.frame()\n    for(i in as.character(risks)){\n        tmp <- cbind(fit[[i]]$time,\n                     fit[[i]]$n.event,\n                     fit[[i]]$strata,\n                     rep(i, times = length(fit[[i]]$time)))\n\n        tmp <- as.data.frame(tmp)\n        forTables <- as.data.frame(rbind(forTables, tmp))\n\n    }\n    colnames(forTables) <- c(\"time\", \"n.event\", \"strata\", \"risk\")\n    forTables <- merge(forTables, strataMapping, by = \"strata\")\n    forTables[,1:3] <- sapply(forTables[,1:3], function(x) as.numeric(as.character(x)))\n\n    makeRow <- function(ri, gr){\n        tmp <- filter(forTables, risk == ri, group == gr)\n        newRow <- numeric(length(timePoints))\n        for(i in 1:length(timePoints)){\n            tmp2 <- filter(tmp, tmp$time <= timePoints[i])\n            newValue <- sum(tmp2$n.event)\n            newRow[i] <- newValue\n        }\n\n        newRow\n    }\n\n    makeTable <- function(ri){\n        tab <- sapply(groups, function(x) makeRow(ri, x))\n        tab <- t(tab)\n        tab <- as.data.frame(tab)\n        colnames(tab) <- timePoints\n        tab\n    }\n\n\n    eventTable <- lapply(risks, function(x) makeTable(x))\n\n    names(eventTable) <- risks\n\n    args <- lapply(eventTable, function(x) arrangeGrob(tableGrob(x, theme = ttheme_minimal())))\n    args$top <- textGrob(\"Number of events\", gp=gpar(fontface=\"bold\"), vjust = 1)\n    args$ncol <- length(risks)\n\n    do.call(grid.arrange, args)\n}\n\n\n\n",
    "created" : 1499766171978.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2071478789",
    "id" : "BED0459E",
    "lastKnownWriteTime" : 1499720849,
    "last_content_update" : 1499720849,
    "path" : "~/GitHub/cr17/package/R/eventsTab.R",
    "project_path" : "R/eventsTab.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}