{
    "collab_server" : "",
    "contents" : "\n\n#data frame for plotting\n\ntoPlotDf <- function(fit){\n\n    risks <- names(fit)\n\n    risks <- levels(factor(risks))\n\n\n\n    #dealing with factor names of strata\n\n    badGroupNames <- levels(fit[[1]]$strata)\n\n    strataMapping <- 1:length(badGroupNames)\n\n    #ISSUE nazwy grup nie moga mieć w środku '='\n\n    groups <- sapply(as.character(badGroupNames), function(x) strsplit(x, split = \"=\")[[1]][2])\n\n    strataMapping <- cbind(strataMapping, groups)\n\n    colnames(strataMapping) <- c(\"strata\", \"group\")\n\n\n\n    toPlot <- c()\n\n    for(i in risks){\n\n        tmp <- cbind(fit[[i]]$time,\n\n                     fit[[i]]$surv,\n\n                     fit[[i]]$strata,\n\n                     fit[[i]]$lower,\n\n                     fit[[i]]$upper,\n\n                     rep(i, times = length(fit[[i]]$time)))\n\n\n\n        tmp <- as.data.frame(tmp)\n\n        toPlot <- as.data.frame(rbind(toPlot, tmp))\n\n    }\n\n\n\n    colnames(toPlot) <- c(\"time\", \"prob\", \"strata\", \"lowerBound\", \"upperBound\", \"risk\")\n\n    toPlot <- merge(toPlot, strataMapping, by = \"strata\")\n\n\n\n    toPlot$time <- as.numeric(as.character(toPlot$time))\n\n    toPlot$prob <- as.numeric(as.character(toPlot$prob))\n\n    toPlot$lowerBound <- as.numeric(as.character(toPlot$lowerBound))\n\n    toPlot$upperBound <- as.numeric(as.character(toPlot$upperBound))\n\n    toPlot <- toPlot[, !names(toPlot) %in% \"strata\"]\n\n\n\n\n\n    #adding starting points\n\n    zeros <- expand.grid(risks, groups)\n\n    colnames(zeros) <- c(\"risk\", \"group\")\n\n    zeros$time <- 0\n\n    zeros$prob <- 1\n\n    zeros$lowerBound <- 1\n\n    zeros$upperBound <- 1\n\n\n\n    zeros <- zeros[, colnames(toPlot)]\n\n\n\n    toPlot <- rbind(toPlot, zeros)\n\n    toPlot\n\n}\n\n\n\n#########################\n\n#confidence intervals for simple analysis\n\nboundsSimpleSurv <- function(ri, gr, target, toPlot){\n\n    ri <- as.character(ri)\n\n    gr <- as.character(gr)\n\n    tmp <- as.data.frame(filter(toPlot, toPlot$risk == ri & toPlot$group == gr))\n\n    tmp <- tmp[order(tmp$time),]\n\n    whichTime <- which(tmp$time < target)\n\n    nr <- length(whichTime)\n\n    lower <- tmp$lowerBound[nr]\n\n    upper  <- tmp$upperBound[nr]\n\n    prob <- tmp$prob[nr]\n\n    c(lower, prob, upper)\n\n}\n\n\n\n#######################\n\n\n\n#barsData for survival curves plotting\n\nbarsDataSimpleSurv <- function(toPlot, target, risks, groups){\n\n\n\n    barsData <- expand.grid(risks, groups)\n\n\n\n    low <- c()\n\n    up <- c()\n\n    prob <- c()\n\n    for(i in 1:nrow(barsData)){\n\n        tmpBounds <- as.numeric(boundsSimpleSurv(barsData[i,1],barsData[i,2],target, toPlot))\n\n        low <- c(low, tmpBounds[1])\n\n        prob <- c(prob, tmpBounds[2])\n\n        up <- c(up, tmpBounds[3])\n\n    }\n\n\n\n    barsData <- cbind(barsData, low, prob, up)\n\n    colnames(barsData)[1:2] <- c(\"risk\", \"group\")\n\n    barsData\n\n\n\n}\n\n\n\n#######################\n\n\n\n#' @title Survival curves\n\n#' @name plotSurvival\n\n#' @description The function plots survival curves for each risk and group.\n\n#' @param fit a result of fitSurvival function.\n\n#' @param target point in time, in which the confidence bounds should be plotted.\n\n#' @return a ggplot containing n graphs, where n is number of risks. Each graph represents survival curves for given risk. One curve corresponds to one group.\n\n#' @export\n\n#' @examples fitS <- fitSurvival(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\", type = \"kaplan-meier\", conf.int = 0.95, conf.type = \"log\")\n\n#' plotSurvival(fit = fitS, target = 1200)\n\n#' @importFrom ggplot2 ggplot\n\n#' @importFrom dplyr filter\n\n#' @importFrom scales extended_breaks\n\n\n\n\n\nplotSurvival <- function(fit, target){\n\n\n\n    toPlot <- toPlotDf(fit)\n\n\n\n    #defining risks\n\n    risks <- unique(toPlot$risk)\n\n    risks <- levels(factor(risks))\n\n\n\n    #defining groups\n\n    groups <- unique(toPlot$group)\n\n    groups <- factor(groups)\n\n\n\n\n    if(!is.null(target) & is.numeric(target)){\n    barsData <- barsDataSimpleSurv(toPlot, target, risks, groups)}\n\n\n\n\n\n    pd <- position_dodge(0.9)\n\n    #making a plot\n\n    plot1 <- ggplot(data = toPlot, aes(time, prob, color = group)) +\n\n        geom_step(size=1) +\n\n        facet_grid(~risk, scales = \"free\")\n\n\n\n    if(!is.null(target) & is.numeric(target)){\n\n    plot1 <- plot1 +\n\n        geom_errorbar(data = barsData,\n\n                      mapping = aes(x = target, ymin = low, ymax = up),\n\n                      size = 1,\n\n                      alpha = 0.7,\n\n                      width = 0.7,\n\n                      position = pd)}\n\n\n\n    #making it beauty\n\n    plot1 <- plot1 +\n\n        theme_minimal() +\n\n        ggtitle(\"Survival curves\") +\n\n        theme(plot.title = element_text(size=13, face=\"bold\", hjust = 0.5), legend.position = \"top\") +\n\n        scale_y_continuous(\"Probability of survivng up to time t\", limits = c(0,1)) +\n\n        scale_x_continuous(\"Time\")+\n\n        theme(legend.title = element_text(size=10, face=\"bold\"))+\n\n        scale_color_discrete(name=\"Group\", labels = groups)\n\n\n\n\n\n    plot1\n\n}\n",
    "created" : 1499688330466.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1498887498",
    "id" : "27C13432",
    "lastKnownWriteTime" : 1499688418,
    "last_content_update" : 1499688437546,
    "path" : "~/GitHub/cr17/package/R/plotSurvival.R",
    "project_path" : "R/plotSurvival.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}