{
    "collab_server" : "",
    "contents" : "#' @title Number at risk tablew\n#' @name riskTab\n#' @description The function creates tables for each risk with number of observation at risk in given time in groups.\n#' @param fit a result of fitSurvival function.\n#' @return A grob with n tables, where n is number of risks. Each table contains number of observations ar risk in each group in given time points (the time points correspond to breaks at x-axis of plots with survival curves).\n#' @export\n#' @examples fitS <- fitSurvival(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\", type = \"kaplan-meier\", conf.int = 0.95, conf.type = \"log\")\n#' riskTab(fit = fitS)\n#' @importFrom dplyr filter\n#' @importFrom scales extended_breaks\n#' @importFrom grid textGrob\n\n\nriskTab <- function(fit){\n\n    toPlot <- toPlotDf(fit)\n\n    #table - number at risk\n    risks <- names(fit)\n    risks <- levels(factor(risks))\n\n    #dealing with factor names of strata\n    badGroupNames <- levels(fit[[1]]$strata)\n    strataMapping <- 1:length(badGroupNames)\n    #ISSUE nazwy grup nie moga mieć w środku '='\n    groups <- sapply(as.character(badGroupNames), function(x) strsplit(x, split = \"=\")[[1]][2])\n    strataMapping <- cbind(strataMapping, groups)\n    colnames(strataMapping) <- c(\"strata\", \"group\")\n\n\n    timePoints <- sapply(risks, function(x){\n        tmp <- filter(toPlot, risk == x)\n        extended_breaks()(tmp$time)\n    })\n    names(timePoints) <- risks\n\n    forTables <- c()\n    for(i in risks){\n        tmp <- cbind(fit[[i]]$time,\n                     fit[[i]]$n.risk,\n                     fit[[i]]$strata,\n                     rep(i, times = length(fit[[i]]$time)))\n\n        tmp <- as.data.frame(tmp)\n        forTables <- as.data.frame(rbind(forTables, tmp))\n\n    }\n    colnames(forTables) <- c(\"time\", \"n.risk\", \"strata\", \"risk\")\n    forTables <- merge(forTables, strataMapping, by = \"strata\")\n    forTables[,1:3] <- sapply(forTables[,1:3], function(x) as.numeric(as.character(x)))\n\n    makeRow <- function(ri, gr){\n        tmp <- filter(forTables, risk == ri, group == gr)\n        newRow <- c()\n        tp <- timePoints[[ri]]\n        for(i in tp){\n            tmp2 <- filter(tmp, tmp$time >= i)\n            nr <- which.min(tmp2$time)\n            newValue <- tmp2$n.risk[nr]\n            newRow <- c(newRow, newValue)\n        }\n\n        if(length(newRow) != length(tp)){\n            lack <- length(tp) - length(newRow)\n            newRow <- c(newRow, rep(0, times = lack))\n        }\n\n        newRow\n    }\n\n    makeTable <- function(risk){\n        tab <- sapply(groups, function(x) makeRow(risk, x))\n        tab <- t(tab)\n        tab <- as.data.frame(tab)\n        colnames(tab) <- timePoints[[risk]]\n        rownames(tab) <- groups\n        tab\n    }\n\n    riskTable <- sapply(risks, makeTable)\n    names(riskTable) <- risks\n\n\n    lay <- rbind(c(1,1),\n                 c(2,3))\n    grid.arrange(arrangeGrob(tableGrob(riskTable[[1]], theme = ttheme_minimal())),\n                 arrangeGrob(tableGrob(riskTable[[2]], theme = ttheme_minimal())),\n                 top = textGrob(\"Number at Risk\", gp=gpar(fontface=\"bold\"), vjust = 1),ncol= 2)\n\n}\n",
    "created" : 1499175040341.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1938551034",
    "id" : "C32D553F",
    "lastKnownWriteTime" : 1499175082,
    "last_content_update" : 1499175082076,
    "path" : "~/GitHub/cr17/package/R/riskTab.R",
    "project_path" : "R/riskTab.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}