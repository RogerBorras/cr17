{
    "collab_server" : "",
    "contents" : "\n#' @title number of events up to time t\n#' @name eventsTab\n#' @description tables with number of events up to time t, for given risk and group\n#' @param fit fitSurvival object\n#' @export\n#' @importFrom dplyr filter\n#' @importFrom scales extended_breaks\n#' @importFrom grid textGrob\n\n\neventTab <- function(fit,\n                     ci,\n                     risk,\n                     group){\n\n\n    #make long format\n    ci <- ci[-length(ci)]\n    aggNames <- names(ci)\n\n    toPlot <- c()\n\n    for(i in aggNames){\n        tmp <- as.data.frame(ci[[i]])\n        tmp$name <- i\n        toPlot <- as.data.frame(rbind(toPlot, tmp))\n    }\n\n    riskGroup <- sapply(toPlot$name, function(x){\n        unlist(strsplit(x, split = \" \"))\n    })\n\n    riskGroup <- as.data.frame(riskGroup)\n    riskGroup <- t(riskGroup)\n    colnames(riskGroup) <- c(risk, group)\n    rownames(riskGroup) <- NULL\n\n    toPlot <- cbind(toPlot, riskGroup)\n    toPlot <- toPlot[, !names(toPlot) %in% \"name\"]\n\n    risks <- as.data.frame(unique(toPlot[,risk]))\n    risks <- levels(factor(risks[,1]))\n\n    groups <- as.data.frame(unique(toPlot[,group]))\n    groups <- levels(factor(groups[,1]))\n\n\n\n    #adding conf intervals\n    toPlot$lowerBound <- sapply(1:nrow(toPlot), function(x){\n        est <- toPlot[x, \"est\"]\n        var <- toPlot[x, \"var\"]\n        exp(log(est) - 1.96*sqrt(var)/est)\n    })\n\n    toPlot$upperBound <- sapply(1:nrow(toPlot), function(x){\n        est <- toPlot[x, \"est\"]\n        var <- toPlot[x, \"var\"]\n        exp(log(est) + 1.96*sqrt(var)/est)\n    })\n\n    colnames(toPlot)[which(colnames(toPlot) == risk)] <- \"fac\"\n    colnames(toPlot)[which(colnames(toPlot) == group)] <- \"col\"\n\n    #dealing with factor names of strata\n    badGroupNames <- levels(fit[[1]]$strata)\n    strataMapping <- 1:length(badGroupNames)\n    #ISSUE nazwy grup nie moga mieć w środku '='\n    groups <- sapply(as.character(badGroupNames), function(x) strsplit(x, split = \"=\")[[1]][2])\n    strataMapping <- cbind(strataMapping, groups)\n    colnames(strataMapping) <- c(\"strata\", \"group\")\n\n\n    timePoints <- lapply(risks, function(x){\n        tmp <- filter(toPlot, fac == x)\n        extended_breaks()(tmp$time)\n    })\n\n    names(timePoints) <- risks\n\n\n\n    forTables <- c()\n    for(i in as.character(risks)){\n        tmp <- cbind(fit[[i]]$time,\n                     fit[[i]]$n.event,\n                     fit[[i]]$strata,\n                     rep(i, times = length(fit[[i]]$time)))\n\n        tmp <- as.data.frame(tmp)\n        forTables <- as.data.frame(rbind(forTables, tmp))\n\n    }\n    colnames(forTables) <- c(\"time\", \"n.event\", \"strata\", \"risk\")\n    forTables <- merge(forTables, strataMapping, by = \"strata\")\n    forTables[,1:3] <- sapply(forTables[,1:3], function(x) as.numeric(as.character(x)))\n\n    makeRow <- function(ri, gr){\n        tmp <- filter(forTables, risk == ri, group == gr)\n        newRow <- c()\n        tp <- timePoints[[ri]]\n        for(i in tp){\n            tmp2 <- filter(tmp, tmp$time <= i)\n            newValue <- sum(tmp2$n.event)\n            newRow <- c(newRow, newValue)\n        }\n\n        newRow\n    }\n\n    makeTable <- function(ri){\n        tab <- sapply(groups, function(x) makeRow(ri, x))\n        tab <- t(tab)\n        tab <- as.data.frame(tab)\n        colnames(tab) <- timePoints[[ri]]\n        rownames(tab) <- groups\n        tab\n    }\n\n\n    eventTable <- lapply(risks, function(x) makeTable(x))\n\n\n    names(eventTable) <- risks\n\n    grid.arrange(arrangeGrob(tableGrob(eventTable[[1]], theme = ttheme_minimal())),\n                 arrangeGrob(tableGrob(eventTable[[2]], theme = ttheme_minimal())),\n                 top = textGrob(\"Number of events\", gp=gpar(fontface=\"bold\"), vjust = 1),ncol= 2)\n\n}\n\n",
    "created" : 1498589331599.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3821715736",
    "id" : "8F86EA60",
    "lastKnownWriteTime" : 1498592136,
    "last_content_update" : 1498592136052,
    "path" : "~/GitHub/mgr/kod/package/cr17/R/eventsTab.R",
    "project_path" : "R/eventsTab.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}