{
    "collab_server" : "",
    "contents" : "\n#ci <- fitCuminc(\"time\", \"event\", \"gender\", LUAD, \"alive\")\n#ci <- fitCuminc(\"time\", \"risk\", \"group\", data)\n\n\n#' @title fitting cuminc object\n#' @name fitCumul\n#' @description list with cumulative incidences and a test of differences between them\n#' @param time time must be numeric\n#' @param risk can be numeric or factor/character\n#' @param group can be numeric or factor/character\n#' @param data can be data frame or matrix\n#' @param conf.int level of two sided conf int\n#' @param conf.type \"none\", \"plain\", \"log\" (default), \"log-log\n#' @export\n#' @importFrom dplyr filter\n#' @importFrom cmprsk cuminc\n\nfitCuminc <- function(time,\n                     risk,\n                     group,\n                     data,\n                     cens = 0,\n                     rho = 0){\n\n    data <- as.data.frame(data)\n\n    risks <- riskVec(data, risk, cens)\n    uniRisks <- 1:length(risks)\n    mapRisks <- cbind(risks, uniRisks)\n    colnames(mapRisks)[1] <- risk\n\n    groups <- as.data.frame(unique(data[, group]))\n    groups <- filter(groups, !is.na(groups))\n    uniGroups <- letters[1:nrow(groups)]\n    mapGroups <- cbind(groups, uniGroups)\n    colnames(mapGroups)[1] <- group\n\n    data <- merge(data, mapRisks, by = risk)\n    data <- merge(data, mapGroups, by = group)\n\n    ci <- cuminc(ftime = data[, time],\n                 fstatus = data[, \"uniRisks\"],\n                 group = data[, \"uniGroups\"],\n                 rho = rho,\n                 cencode = cens)\n\n    aggnames <- names(ci)\n    aggnames <- aggnames[-length(aggnames)]\n\n    tab <- c()\n    for(i in aggnames){\n        tmp <- unlist(strsplit(i, \" \"))\n        tab <- rbind(tab, c(i, tmp))\n    }\n    tab <- as.data.frame(tab)\n\n    colnames(tab) <- c(\"aggnames\", \"uniGroups\", \"uniRisks\")\n\n    tab <- merge(tab, mapRisks, by = \"uniRisks\")\n    tab <- merge(tab, mapGroups, by = \"uniGroups\")\n\n    tab$newname <- paste(tab[, risk], tab[,group])\n\n    names(ci)[1:length(ci)-1] <- tab$newname\n\n    ci\n}\n\n\n#' @title Log rank test for competing risks\n#' @name testCuminc\n#' @description Log rank test for competing risks\n#' @param time time must be numeric\n#' @param risk can be numeric or factor/character\n#' @param group can be numeric or factor/character\n#' @param data can be data frame or matrix\n#' @param conf.int level of two sided conf int\n#' @param conf.type \"none\", \"plain\", \"log\" (default), \"log-log\n#' @export\n#' @importFrom dplyr filter\n#' @importFrom cmprsk cuminc\n#' @importFrom gridExtra tableGrob\n\ntestCuminc <- function(ci){\n\n    aggNames <- names(ci)\n    aggNames <- aggNames[-length(ci)]\n\n    riskGroup <- sapply(aggNames, function(x){\n        unlist(strsplit(x, split = \" \"))\n    })\n\n    riskGroup <- as.data.frame(riskGroup)\n    riskGroup <- t(riskGroup)\n    colnames(riskGroup) <- c(\"risk\", \"group\")\n\n    risks <- unique(riskGroup[,\"risk\"])\n    risks <- levels(factor(risks))\n\n    groups <- unique(riskGroup[, \"group\"])\n    groups <- levels(factor(groups))\n\n    tab <- as.data.frame(ci[[length(ci)]])\n    p <- as.data.frame(t(tab$pv))\n    colnames(p) <- risks\n\n\n    tab1 <- c()\n    for(i in 1:length(risks)){\n        tmp <- p[,which(colnames(p) == risks[i])]\n        tmp <- round(tmp, digits = 4)\n        tab1 <- as.data.frame(cbind(tab1,tmp))\n    }\n\n\n    colnames(tab1) <- risks\n    rownames(tab1) <- \"CompRisks LRT\"\n\n    as.data.frame(tab1)\n}\n\n",
    "created" : 1498585809213.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "589890075",
    "id" : "BC6D2D71",
    "lastKnownWriteTime" : 1498591700,
    "last_content_update" : 1498591700572,
    "path" : "~/GitHub/mgr/kod/package/cr17/R/fit&testCuminc.R",
    "project_path" : "R/fit&testCuminc.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}