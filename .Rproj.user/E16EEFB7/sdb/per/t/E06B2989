{
    "collab_server" : "",
    "contents" : "#fit <- fitSurvival(\"time\", \"risk\", \"group\", data)\n#fit <- fitSurvival(\"CI_time\", \"CI_status\", \"DM\", dt)\n#fit <- fitSurvival(\"time\", \"event\", \"gender\", LUAD, \"alive\")\n\nriskVec <- function(data, risk, cens){\n    risks <- as.data.frame(unique(data[, risk]))\n    risks <- filter(risks, risks != cens)\n    risks <- risks[,1]\n    risks <- levels(factor(risks))\n}\n\n#' @title simple survfit for each risk separetly\n#' @name fitSurvival\n#' @description The function fits Kaplan-Mayer models for each risk\n#' treating other events as censoring\n#' @param time time must be numeric\n#' @param risk can be numeric or factor/character\n#' @param group can be numeric or factor/character\n#' @param data can\n#' be data frame or matrix\n#' @param type \"kaplan-meier\", \"fleming-harrington\" or \"fh2\"\n#' @param conf.int level of two sided conf int\n#' @param conf.type \"none\", \"plain\", \"log\" (default), \"log-log\n#' @param error \"greenwood (default)', \"tsiatis\", \"aalen\n#' @export\n#' @importFrom dplyr filter group_by\n#' @importFrom survival Surv survfit\n\nfitSurvival <- function(time,\n                        risk,\n                        group,\n                        data,\n                        cens = 0,\n                        type = \"kaplan-meier\",\n                        conf.int = 0.95,\n                        conf.type = \"log\"\n)\n\n{\n\n    #errors\n    stopifnot(type %in% c(\"kaplan-meier\", \"fleming-harrington\", \"fh2\"))\n    stopifnot(conf.type %in% c(\"none\", \"plain\", \"log\" , \"log-log\"))\n\n    #data preparation\n    data <- as.data.frame(data)\n    timeCol <- data[, time]\n    groups <- factor(data[, group])\n\n\n    risks <- riskVec(data, risk, cens)\n\n    nrOfRisks <- as.numeric(nrow(risks))\n\n    #for each risk we fit a survfit object, trating other events as censoring\n    #fit is a list of survfit objects assuming other events as censoring\n    fit <- lapply(risks, function(x) {\n        localStatus <- {data[,risk] == x}\n        summary(survfit(Surv(timeCol, localStatus)~groups,\n                        type = type,\n                        conf.int = conf.int,\n                        conf.type = conf.type\n        ))\n    })\n\n    names(fit) <- risks\n    fit\n}\n\n#' @title Log rank test for differences between groups\n#' @name lrtSurvival\n#' @description The function tests, if there are differences between groups for two risks independently\n#' @param time time must be numeric\n#' @param risk can be numeric or factor/character\n#' @param group can be numeric or factor/character\n#' @param data can be data frame or matrix\n#' @param type \"kaplan-meier\", \"fleming-harrington\" or \"fh2\"\n#' @param conf.int level of two sided conf int\n#' @param conf.type \"none\", \"plain\", \"log\" (default), \"log-log\n#' @param error \"greenwood (default)', \"tsiatis\", \"aalen\n#' @export\n#' @importFrom dplyr filter\n#' @importFrom survival survdiff Surv\n#' @importFrom gridExtra tableGrob\n\nlrtSurvival <- function(time,\n                        risk,\n                        group,\n                        data,\n                        cens = 0,\n                        rho = 0)\n{\n\n    options(scipen=999)\n\n    #data preparation\n    data <- as.data.frame(data)\n    timeCol <- data[, time]\n\n    #risks - a vector indicating possible risk values\n    risks <- riskVec(data, risk, cens)\n\n\n    nrOfRisks <- as.numeric(length(risks))\n\n    diff <- lapply(risks, function(x){\n        localStatus <- {data[,risk] == x}\n        localGroup <- factor(data[, group])\n        survdiff(Surv(timeCol, localStatus) ~ localGroup, rho = rho)\n    })\n\n    p <- sapply(1:nrOfRisks, function(x) {\n        pchisq(diff[[x]]$chisq, length(diff[[x]]$n)-1, lower.tail = FALSE)})\n\n    p <- t(as.data.frame(p))\n    p <- round(p, digits = 4)\n\n    colnames(p) <- risks\n    rownames(p) <- \"F-H Test\"\n\n    as.data.frame(p)\n\n}\n\n\n# lrtSurvival(\"time\", \"risk\", \"group\", data) -> x\n\n",
    "created" : 1498584916178.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1421750366",
    "id" : "E06B2989",
    "lastKnownWriteTime" : 1498591700,
    "last_content_update" : 1498591700638,
    "path" : "~/GitHub/mgr/kod/package/cr17/R/fit&testSurvival.R",
    "project_path" : "R/fit&testSurvival.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}