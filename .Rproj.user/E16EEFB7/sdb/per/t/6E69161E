{
    "collab_server" : "",
    "contents" : "\nriskVec <- function(data, risk, cens){\n    risks <- as.data.frame(unique(data[, risk]))\n    risks <- filter(risks, risks != cens)\n    risks <- risks[,1]\n    risks <- levels(factor(risks))\n}\n\n#' @title Estimation of survival curves for each risk separetly.\n#' @name fitSurvival\n#' @description The function fits survival curves for each risk treating other events as censoring.\n#' @param time name of a column indicating time of an event or follow-up, must be numeric.\n#' @param risk name of a column indicating type of event, can be numeric or factor/character.\n#' @param group nam of a column indicating group variable, can be numeric or factor/character.\n#' @param data data.frame, data.table or matrix containg time, risk and group columns.\n#' @param cens value of 'risk' indicating censored observation (default 0).\n#' @param type type of survival curve to be fitted. Possible values are \"kaplan-meier\" (default), \"fleming-harrington\" or \"fh2\".\n#' @param conf.int level of two sided confidence interval.\n#' @param conf.type type of confidence interval. Possilble values: \"none\", \"plain\", \"log\" (default), \"log-log\".\n#' @return List, which elements are survfit.summary object for each risk separetly.\n#' @export\n#' @examples fitSurvival(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\", type = \"kaplan-meier\", conf.int = 0.95, conf.type = \"log\")\n#' @importFrom dplyr filter group_by\n#' @importFrom survival Surv survfit\n\nfitSurvival <- function(time,\n                        risk,\n                        group,\n                        data,\n                        cens = 0,\n                        type = \"kaplan-meier\",\n                        conf.int = 0.95,\n                        conf.type = \"log\"\n)\n\n{\n\n    #errors\n    stopifnot(type %in% c(\"kaplan-meier\", \"fleming-harrington\", \"fh2\"))\n    stopifnot(conf.type %in% c(\"none\", \"plain\", \"log\" , \"log-log\"))\n\n    #data preparation\n    data <- as.data.frame(data)\n    timeCol <- data[, time]\n    groups <- factor(data[, group])\n\n\n    risks <- riskVec(data, risk, cens)\n\n    nrOfRisks <- as.numeric(nrow(risks))\n\n    #for each risk we fit a survfit object, trating other events as censoring\n    #fit is a list of survfit objects assuming other events as censoring\n    fit <- lapply(risks, function(x) {\n        localStatus <- {data[,risk] == x}\n        summary(survfit(Surv(timeCol, localStatus)~groups,\n                        type = type,\n                        conf.int = conf.int,\n                        conf.type = conf.type\n        ))\n    })\n\n    names(fit) <- risks\n    fit\n}\n\n#' @title Fleming-Harrington test for differences between groups.\n#' @name lrtSurvival\n#' @description The function tests, if there are differences between groups for survival curves estimating for all risks separately (treating other events as censoring).\n#' @param time name of a column indicating time of an event or follow-up, must be numeric.\n#' @param risk name of a column indicating type of event, can be numeric or factor/character.\n#' @param group nam of a column indicating group variable, can be numeric or factor/character.\n#' @param data data.frame, data.table or matrix containg time, risk and group columns.\n#' @param cens value of 'risk' indicating censored observation.\n#' @param rho rho parameter from Fleming-Harrington Test.\n#' @return a data.frame containing p-values of Fleming-Harrington Test for each risk.\n#' @export\n#' @examples lrtSurvival(time = \"time\", risk = \"event\", group = \"gender\", data = LUAD, cens = \"alive\", rho = 0)\n#' @importFrom dplyr filter\n#' @importFrom survival survdiff Surv\n#' @importFrom gridExtra tableGrob\n\nlrtSurvival <- function(time,\n                        risk,\n                        group,\n                        data,\n                        cens = 0,\n                        rho = 0)\n{\n\n    options(scipen=999)\n\n    #data preparation\n    data <- as.data.frame(data)\n    timeCol <- data[, time]\n\n    #risks - a vector indicating possible risk values\n    risks <- riskVec(data, risk, cens)\n\n\n    nrOfRisks <- as.numeric(length(risks))\n\n    diff <- lapply(risks, function(x){\n        localStatus <- {data[,risk] == x}\n        localGroup <- factor(data[, group])\n        survdiff(Surv(timeCol, localStatus) ~ localGroup, rho = rho)\n    })\n\n    p <- sapply(1:nrOfRisks, function(x) {\n        pchisq(diff[[x]]$chisq, length(diff[[x]]$n)-1, lower.tail = FALSE)})\n\n    p <- t(as.data.frame(p))\n    p <- round(p, digits = 4)\n\n    colnames(p) <- risks\n    rownames(p) <- \"F-H Test\"\n\n    as.data.frame(p)\n\n}\n",
    "created" : 1499174988243.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1844943605",
    "id" : "6E69161E",
    "lastKnownWriteTime" : 1499174534,
    "last_content_update" : 1499174534,
    "path" : "~/GitHub/mgr/kod/package/cr17/R/fitAndTestSurvival.R",
    "project_path" : "R/fitAndTestSurvival.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}